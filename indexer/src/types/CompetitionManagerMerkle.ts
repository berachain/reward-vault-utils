/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface CompetitionManagerMerkleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "claimReward"
      | "competitionToken"
      | "competitions"
      | "createCompetition"
      | "getAvailableBGT"
      | "getEarnedBGT"
      | "getUserCompetitions"
      | "hasUserClaimed"
      | "initialize"
      | "initialized"
      | "owner"
      | "registerRewardVault"
      | "rewardVault"
      | "totalAllocatedBGT"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CompetitionCreated"
      | "OwnershipTransferred"
      | "RewardClaimed"
      | "RewardVaultRegistered"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "claimReward",
    values: [BytesLike, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "competitionToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "competitions",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createCompetition",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAvailableBGT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEarnedBGT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserCompetitions",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasUserClaimed",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialized",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerRewardVault",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalAllocatedBGT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "competitionToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "competitions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCompetition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAvailableBGT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEarnedBGT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserCompetitions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasUserClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerRewardVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalAllocatedBGT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace CompetitionCreatedEvent {
  export type InputTuple = [merkleRoot: BytesLike, rewardAmount: BigNumberish];
  export type OutputTuple = [merkleRoot: string, rewardAmount: bigint];
  export interface OutputObject {
    merkleRoot: string;
    rewardAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [user: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [user: string, newOwner: string];
  export interface OutputObject {
    user: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardClaimedEvent {
  export type InputTuple = [
    merkleRoot: BytesLike,
    user: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [merkleRoot: string, user: string, amount: bigint];
  export interface OutputObject {
    merkleRoot: string;
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardVaultRegisteredEvent {
  export type InputTuple = [rewardVault: AddressLike];
  export type OutputTuple = [rewardVault: string];
  export interface OutputObject {
    rewardVault: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CompetitionManagerMerkle extends BaseContract {
  connect(runner?: ContractRunner | null): CompetitionManagerMerkle;
  waitForDeployment(): Promise<this>;

  interface: CompetitionManagerMerkleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  claimReward: TypedContractMethod<
    [merkleRoot: BytesLike, amount: BigNumberish, proof: BytesLike[]],
    [void],
    "nonpayable"
  >;

  competitionToken: TypedContractMethod<[], [string], "view">;

  competitions: TypedContractMethod<[arg0: BytesLike], [bigint], "view">;

  createCompetition: TypedContractMethod<
    [merkleRoot: BytesLike, rewardAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getAvailableBGT: TypedContractMethod<[], [bigint], "view">;

  getEarnedBGT: TypedContractMethod<[], [bigint], "view">;

  getUserCompetitions: TypedContractMethod<
    [user: AddressLike],
    [string[]],
    "view"
  >;

  hasUserClaimed: TypedContractMethod<
    [user: AddressLike, merkleRoot: BytesLike],
    [boolean],
    "view"
  >;

  initialize: TypedContractMethod<
    [_rewardVault: AddressLike],
    [void],
    "nonpayable"
  >;

  initialized: TypedContractMethod<[], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  registerRewardVault: TypedContractMethod<
    [_rewardVault: AddressLike],
    [void],
    "nonpayable"
  >;

  rewardVault: TypedContractMethod<[], [string], "view">;

  totalAllocatedBGT: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "claimReward"
  ): TypedContractMethod<
    [merkleRoot: BytesLike, amount: BigNumberish, proof: BytesLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "competitionToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "competitions"
  ): TypedContractMethod<[arg0: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "createCompetition"
  ): TypedContractMethod<
    [merkleRoot: BytesLike, rewardAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAvailableBGT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getEarnedBGT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserCompetitions"
  ): TypedContractMethod<[user: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "hasUserClaimed"
  ): TypedContractMethod<
    [user: AddressLike, merkleRoot: BytesLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[_rewardVault: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "initialized"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "registerRewardVault"
  ): TypedContractMethod<[_rewardVault: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "rewardVault"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalAllocatedBGT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "CompetitionCreated"
  ): TypedContractEvent<
    CompetitionCreatedEvent.InputTuple,
    CompetitionCreatedEvent.OutputTuple,
    CompetitionCreatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RewardClaimed"
  ): TypedContractEvent<
    RewardClaimedEvent.InputTuple,
    RewardClaimedEvent.OutputTuple,
    RewardClaimedEvent.OutputObject
  >;
  getEvent(
    key: "RewardVaultRegistered"
  ): TypedContractEvent<
    RewardVaultRegisteredEvent.InputTuple,
    RewardVaultRegisteredEvent.OutputTuple,
    RewardVaultRegisteredEvent.OutputObject
  >;

  filters: {
    "CompetitionCreated(bytes32,uint256)": TypedContractEvent<
      CompetitionCreatedEvent.InputTuple,
      CompetitionCreatedEvent.OutputTuple,
      CompetitionCreatedEvent.OutputObject
    >;
    CompetitionCreated: TypedContractEvent<
      CompetitionCreatedEvent.InputTuple,
      CompetitionCreatedEvent.OutputTuple,
      CompetitionCreatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "RewardClaimed(bytes32,address,uint256)": TypedContractEvent<
      RewardClaimedEvent.InputTuple,
      RewardClaimedEvent.OutputTuple,
      RewardClaimedEvent.OutputObject
    >;
    RewardClaimed: TypedContractEvent<
      RewardClaimedEvent.InputTuple,
      RewardClaimedEvent.OutputTuple,
      RewardClaimedEvent.OutputObject
    >;

    "RewardVaultRegistered(address)": TypedContractEvent<
      RewardVaultRegisteredEvent.InputTuple,
      RewardVaultRegisteredEvent.OutputTuple,
      RewardVaultRegisteredEvent.OutputObject
    >;
    RewardVaultRegistered: TypedContractEvent<
      RewardVaultRegisteredEvent.InputTuple,
      RewardVaultRegisteredEvent.OutputTuple,
      RewardVaultRegisteredEvent.OutputObject
    >;
  };
}
