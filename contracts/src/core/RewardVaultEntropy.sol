// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

import {RewardVaultManager} from "./RewardVaultManager.sol";
import {IEntropy} from "@pythnetwork/entropy-sdk-solidity/IEntropy.sol";
import {IEntropyConsumer} from "@pythnetwork/entropy-sdk-solidity/IEntropyConsumer.sol";
import {EntropyStructs} from "@pythnetwork/entropy-sdk-solidity/EntropyStructs.sol";

/// @title RewardVaultEntropy
/// @notice This contract extends RewardVaultManager with Pyth Entropy integration for random number generation
/// @dev Provides base functionality for entropy-based reward systems like loot boxes
abstract contract RewardVaultEntropy is RewardVaultManager, IEntropyConsumer {
    /// @notice The Pyth Entropy contract address
    IEntropy public immutable entropyContract;

    /// @notice Maps sequence numbers to their callback data
    mapping(uint64 => EntropyCallbackData) public entropyCallbacks;

    /// @notice Emitted when an entropy request is made
    /// @param sequenceNumber The sequence number for the entropy request
    /// @param provider The entropy provider address
    /// @param callbackData Additional data for the callback
    event EntropyRequested(uint64 indexed sequenceNumber, address indexed provider, bytes callbackData);

    /// @notice Emitted when entropy is received and processed
    /// @param sequenceNumber The sequence number for the entropy request
    /// @param provider The entropy provider address
    /// @param randomNumber The random number received from Pyth Entropy
    event EntropyReceived(uint64 indexed sequenceNumber, address indexed provider, bytes32 randomNumber);

    /// @notice Struct to store callback data for entropy requests
    struct EntropyCallbackData {
        address requester;
        uint256 timestamp;
        bytes data;
        bool processed;
    }

    /// @notice Custom errors for better gas efficiency and error handling
    error InvalidEntropyContractAddress();
    error EntropyRequestNotFound();
    error EntropyAlreadyProcessed();
    error InvalidEntropyProvider();

    /// @notice Creates a new RewardVaultEntropy
    /// @param _entropyContract The address of the Pyth Entropy contract
    /// @dev Calls the parent RewardVaultManager constructor
    constructor(address _entropyContract) {
        if (_entropyContract == address(0)) revert InvalidEntropyContractAddress();
        entropyContract = IEntropy(_entropyContract);
    }

    /// @notice Request entropy from Pyth Entropy with callback
    /// @param provider The entropy provider address
    /// @param userRandomNumber A secret random number generated by the user
    /// @param callbackData Additional data to be passed to the callback function
    /// @return sequenceNumber The sequence number for the entropy request
    /// @dev This function initiates an entropy request and stores the callback data
    function requestEntropyWithCallback(address provider, bytes32 userRandomNumber, bytes calldata callbackData)
        external
        payable
        returns (uint64 sequenceNumber)
    {
        if (provider == address(0)) revert InvalidEntropyProvider();

        // Request entropy from Pyth
        // trusted: Pyth Entropy contract
        sequenceNumber = entropyContract.requestWithCallback{value: msg.value}(provider, userRandomNumber);

        // Store callback data
        entropyCallbacks[sequenceNumber] = EntropyCallbackData({
            requester: msg.sender,
            timestamp: block.timestamp,
            data: callbackData,
            processed: false
        });

        emit EntropyRequested(sequenceNumber, provider, callbackData);
        return sequenceNumber;
    }

    /// @notice Request entropy from Pyth Entropy (manual reveal)
    /// @param provider The entropy provider address
    /// @param userCommitment The commitment hash of the user's random number
    /// @param useBlockHash Whether to use block hash in the random number generation
    /// @return sequenceNumber The sequence number for the entropy request
    /// @dev This function initiates an entropy request without callback
    function requestEntropy(address provider, bytes32 userCommitment, bool useBlockHash)
        external
        payable
        returns (uint64 sequenceNumber)
    {
        if (provider == address(0)) revert InvalidEntropyProvider();

        // Request entropy from Pyth
        // trusted: Pyth Entropy contract
        sequenceNumber = entropyContract.request{value: msg.value}(provider, userCommitment, useBlockHash);

        emit EntropyRequested(sequenceNumber, provider, "");
        return sequenceNumber;
    }

    /// @notice Reveal entropy request and get the random number
    /// @param provider The entropy provider address
    /// @param sequenceNumber The sequence number for the entropy request
    /// @param userRevelation The user's random number revelation
    /// @param providerRevelation The provider's random number revelation
    /// @return randomNumber The generated random number
    function revealEntropy(address provider, uint64 sequenceNumber, bytes32 userRevelation, bytes32 providerRevelation)
        external
        returns (bytes32 randomNumber)
    {
        randomNumber = entropyContract.reveal(provider, sequenceNumber, userRevelation, providerRevelation);

        emit EntropyReceived(sequenceNumber, provider, randomNumber);
        return randomNumber;
    }

    /// @notice Callback function called by Pyth Entropy when entropy is available
    /// @param sequence The sequence number for the entropy request
    /// @param provider The entropy provider address
    /// @param randomNumber The random number from Pyth Entropy
    /// @dev This function is called by Pyth Entropy and delegates to the implementing contract
    function entropyCallback(uint64 sequence, address provider, bytes32 randomNumber) internal virtual override {
        // Verify the request exists and hasn't been processed
        EntropyCallbackData storage callback = entropyCallbacks[sequence];
        if (callback.requester == address(0)) revert EntropyRequestNotFound();
        if (callback.processed) revert EntropyAlreadyProcessed();

        // Mark as processed
        callback.processed = true;

        emit EntropyReceived(sequence, provider, randomNumber);

        // Delegate to the implementing contract's entropy processing function
        _processEntropy(sequence, provider, randomNumber, callback);
    }

    /// @notice Abstract function that must be implemented by contracts extending this
    /// @param sequence The sequence number for the entropy request
    /// @param provider The entropy provider address
    /// @param randomNumber The random number from Pyth Entropy
    /// @param callback The callback data associated with the request
    /// @dev This function should be implemented to handle the random number
    function _processEntropy(
        uint64 sequence,
        address provider,
        bytes32 randomNumber,
        EntropyCallbackData memory callback
    ) internal virtual;

    /// @notice Get the entropy contract address for IEntropyConsumer
    /// @return The entropy contract address
    function getEntropy() internal view virtual override returns (address) {
        return address(entropyContract);
    }

    /// @notice Gets the callback data for a specific request
    /// @param sequenceNumber The sequence number for the entropy request
    /// @return The callback data structure
    function getEntropyCallback(uint64 sequenceNumber) external view returns (EntropyCallbackData memory) {
        return entropyCallbacks[sequenceNumber];
    }

    /// @notice Checks if a request has been processed
    /// @param sequenceNumber The sequence number for the entropy request
    /// @return True if the request has been processed, false otherwise
    function isEntropyProcessed(uint64 sequenceNumber) external view returns (bool) {
        return entropyCallbacks[sequenceNumber].processed;
    }

    /// @notice Get the fee for a specific provider
    /// @param provider The entropy provider address
    /// @return The fee amount in wei
    function getEntropyFee(address provider) external view returns (uint128) {
        return entropyContract.getFee(provider);
    }

    /// @notice Get provider information
    /// @param provider The entropy provider address
    /// @return The provider information
    function getProviderInfo(address provider) external view returns (EntropyStructs.ProviderInfo memory) {
        return entropyContract.getProviderInfo(provider);
    }
}
